stages:
  - test
  - images
  - release
  - deploy
  - Image Scan

default:
  tags:
    - devsecops-instance 


public-ui-app:image:build:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/public-ui-app/Dockerfile --destination $CI_REGISTRY_IMAGE/public-ui-app:$CI_COMMIT_SHORT_SHA

public-ui-web:image:build:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/public-ui-web/Dockerfile --destination $CI_REGISTRY_IMAGE/public-ui-web:$CI_COMMIT_SHORT_SHA

deploy to dev:
  when: manual
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config set-cluster dev-cluster --server="$KUBE_URL"
    - kubectl config set-cluster dev-cluster --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=dev-cluster --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - envsubst < k8s/arcx-public-ui-configmap.yml | kubectl apply -f -
    - envsubst < k8s/arcx-public-ui-app.yml | kubectl apply -f -
    - envsubst < k8s/arcx-public-ui-web.yml | kubectl apply -f -
  environment:
    name: development
    url: https://arcx-development-public-ui.devsecops-eval.epa.gov
  only:
    - branches
  except:
    - master

Release:
  stage: release
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  script:
    # https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane_copy.md
    - crane auth login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - crane copy "$CI_REGISTRY_IMAGE/public-ui-app:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/public-ui-app:latest"
    - crane copy "$CI_REGISTRY_IMAGE/public-ui-app:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/public-ui-app:$CI_COMMIT_TAG"
    - crane copy "$CI_REGISTRY_IMAGE/public-ui-web:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/public-ui-web:latest"
    - crane copy "$CI_REGISTRY_IMAGE/public-ui-web:$CI_COMMIT_SHORT_SHA" "$CI_REGISTRY_IMAGE/public-ui-web:$CI_COMMIT_TAG"
  only:
    - tags

deploy to prd:
  when: manual
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - apk add gettext
    - kubectl config set-cluster $KUBECTL_PROD_CLUSTER --server="$KUBE_URL"
    - kubectl config set-cluster $KUBECTL_PROD_CLUSTER --certificate-authority=$KUBE_CA_PEM_FILE --embed-certs=true
    - kubectl config set-credentials gitlab --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=$KUBECTL_PROD_CLUSTER --user=gitlab --namespace="$KUBE_NAMESPACE"
    - kubectl config use-context default
    - envsubst < k8s/arcx-public-ui-configmap.yml | kubectl apply -f -
    - envsubst < k8s/arcx-public-ui-app-prd.yml | kubectl apply -f -
    - envsubst < k8s/arcx-public-ui-prd-web.yml | kubectl apply -f -
  environment:
    name: prd
    url: https://arcx.devsecops-prod.aws.epa.gov
    kubernetes:
      namespace: arc-x-public-ui-236-prd
  only:
    - tags
    - master
